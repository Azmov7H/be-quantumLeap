// socket.js
import { Server } from "socket.io";
import Notification from "./models/Notification.js";
import Message from "./models/Message.js";
import Chat from "./models/Chat.js";

let io;
export const onlineUsers = new Map(); // userId (string) -> socketId (string)

export const initSocket = (server) => {
  io = new Server(server, {
    cors: {
      origin: process.env.FRONTEND_URL || "*",
      methods: ["GET", "POST"],
    },
  });

  io.on("connection", (socket) => {
    console.log("‚úÖ User connected:", socket.id);

    // ---------------------------
    // ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸäŸàÿ≤ÿ± (client Ÿäÿ®ÿπÿ™ userId ÿ®ÿπÿØ ÿßŸÑŸÅÿ™ÿ≠)
    // ---------------------------
    socket.on("user_connected", (userId) => {
      try {
        if (!userId) return;
        onlineUsers.set(String(userId), socket.id);
        socket.userId = String(userId);
        console.log(`üìå user_connected: ${userId} -> ${socket.id}`);
      } catch (err) {
        console.error("‚ùå user_connected error:", err);
      }
    });

    // ---------------------------
    // ÿØÿÆŸàŸÑ ÿ∫ÿ±ŸÅÿ© ÿ¥ÿßÿ™
    // ---------------------------
    socket.on("joinChat", (chatId) => {
      try {
        if (!chatId) return;
        socket.join(chatId);
        console.log(`üë• Socket ${socket.id} joined chat ${chatId}`);
      } catch (err) {
        console.error("‚ùå joinChat error:", err);
      }
    });

    // ---------------------------
    // ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ© ÿπÿ®ÿ± ÿßŸÑÿ≥ŸàŸÉÿ™ (Ÿäÿ≠ŸÅÿ∏ ÿ±ÿ≥ÿßŸÑÿ© + Ÿäÿ≠ÿØÿ´ latestMessage + Ÿäÿ®ÿπÿ´ ÿ•ŸäŸÖŸäÿ™ ŸÑŸÑÿ¥ÿßÿ™)
    // ŸàŸäŸàŸÑÿØ Notification ŸÑŸÉŸÑ ÿπÿ∂Ÿà ÿ¢ÿÆÿ± ŸÅŸä ÿßŸÑÿ¥ÿßÿ™ ŸàŸäÿ±ÿ≥ŸÑŸáÿß ŸÑÿ≠ÿ∏ŸäÿßŸã ÿ•ŸÜ ŸÉÿßŸÜŸàÿß online
    // ---------------------------
    socket.on("sendMessage", async ({ chatId, content }) => {
      try {
        if (!socket.userId) {
          console.warn("‚ö†Ô∏è sendMessage: socket has no userId (not registered)");
          return;
        }
        if (!chatId || !content) {
          console.warn("‚ö†Ô∏è sendMessage: missing chatId or content");
          return;
        }

        // 1. ÿ≠ŸÅÿ∏ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ©
        const message = await Message.create({
          chat: chatId,
          sender: socket.userId,
          content,
        });

        // 2. ÿ™ÿ≠ÿØŸäÿ´ ÿ¢ÿÆÿ± ÿ±ÿ≥ÿßŸÑÿ© ŸÅŸä ÿßŸÑÿ¥ÿßÿ™
        await Chat.findByIdAndUpdate(chatId, { latestMessage: message._id });

        // 3. ÿ¨ŸÑÿ® ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© populated
        const populatedMessage = await Message.findById(message._id)
          .populate("sender", "username profileImage");

        // 4. ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© ŸÑŸÉŸÑ ÿßŸÑŸÖŸàÿ¨ŸàÿØŸäŸÜ ŸÅŸä ÿßŸÑÿ∫ÿ±ŸÅÿ© (chat room)
        io.to(chatId).emit("newMessage", populatedMessage);

        // 5. ÿ•ŸÜÿ¥ÿßÿ§ ÿ•ÿ¥ÿπÿßÿ± (Notification) ŸÑŸÉŸÑ ÿπÿ∂Ÿà ŸÅŸä ÿßŸÑÿ¥ÿßÿ™ ÿ∫Ÿäÿ± ÿßŸÑŸÖÿ±ÿ≥ŸÑÿå Ÿàÿ•ÿ±ÿ≥ÿßŸÑ ŸÑÿ≠ÿ∏Ÿä ŸÑŸÉŸÑ Online
        const chat = await Chat.findById(chatId).populate("users", "_id");
        if (chat && Array.isArray(chat.users)) {
          for (const user of chat.users) {
            const targetId = user._id.toString();
            if (targetId === socket.userId) continue;

            const notif = await Notification.create({
              user: targetId,
              fromUser: socket.userId,
              type: "message",
              message: `${populatedMessage.sender.username} ÿ£ÿ±ÿ≥ŸÑ ŸÑŸÉ ÿ±ÿ≥ÿßŸÑÿ© ÿ¨ÿØŸäÿØÿ©`,
              chat: chatId,
            });

            const populatedNotif = await Notification.findById(notif._id)
              .populate("fromUser", "username profileImage");

            // ÿßÿ±ÿ≥ÿßŸÑ ŸÑÿ≠ÿ∏Ÿä ŸÅŸÇÿ∑ ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÖÿ≥ÿ™ŸáÿØŸÅ ŸÑŸà Online
            const targetSocketId = onlineUsers.get(targetId);
            if (targetSocketId) {
              io.to(targetSocketId).emit("receive_notification", populatedNotif);
            } else {
              // ŸÖÿ¥ Online => ÿßŸÑÿßÿ¥ÿπÿßÿ± ŸÖÿ≠ŸÅŸàÿ∏ ŸÅŸä DB (ÿ™ŸÖ ÿ®ÿßŸÑŸÅÿπŸÑ)
              console.log(`‚ö™ User ${targetId} not online ‚Äî notification saved`);
            }
          }
        }
      } catch (err) {
        console.error("‚ùå sendMessage error:", err);
      }
    });

    // ---------------------------
    // ŸÜÿ¥ÿ± ÿ®Ÿàÿ≥ÿ™ ŸÑÿ≠ÿ∏Ÿä + ÿ™ÿÆÿ≤ŸäŸÜ ÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ (ŸáŸÜÿß ÿ®ŸÜÿ®ÿπÿ™ ŸÑŸÉŸÑ ÿßŸÑŸäŸàÿ≤ÿ±ÿ≤ ÿßŸÑÿßÿÆÿ±ŸäŸÜ ÿßŸÑŸÑŸä Online)
    // ŸÑŸà ÿ™ÿ≠ÿ® ÿ™ÿ∫ŸäŸëÿ±Ÿáÿß ŸÑŸÑŸÄ followers ÿ™ÿ®ŸÇŸâ logic ŸÖÿÆÿ™ŸÑŸÅÿ© (ÿ≠ÿ≥ÿ® ŸáŸäŸÉŸÑ ÿßŸÑŸÄ User)
    // ---------------------------
    socket.on("newPost", async ({ postId, username }) => {
      try {
        if (!socket.userId) {
          console.warn("‚ö†Ô∏è newPost: socket has no userId (not registered)");
          return;
        }

        // ÿ•ÿ±ÿ≥ÿßŸÑ ÿ•ÿ¥ÿπÿßÿ± ŸÑŸÉŸÑ Online Users ÿ®ÿßÿ≥ÿ™ÿ´ŸÜÿßÿ° ÿµÿßÿ≠ÿ® ÿßŸÑÿ®Ÿàÿ≥ÿ™
        for (const [userId, sId] of onlineUsers.entries()) {
          if (String(userId) === String(socket.userId)) continue;

          const notif = await Notification.create({
            user: userId,
            fromUser: socket.userId,
            type: "post",
            message: `${username} ŸÜÿ¥ÿ± ŸÖŸÜÿ¥Ÿàÿ± ÿ¨ÿØŸäÿØ`,
            post: postId,
          });

          const populatedNotif = await Notification.findById(notif._id)
            .populate("fromUser", "username profileImage");

          io.to(sId).emit("receive_notification", populatedNotif);
        }

        // ŸÖŸÑÿßÿ≠ÿ∏ÿ©: ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿ∫Ÿäÿ± ÿßŸÑŸÄ Online ŸÑÿØŸäŸáŸÖ ÿ•ÿ¥ÿπÿßÿ± ŸÖÿ≠ŸÅŸàÿ∏ ŸÅŸä DB
      } catch (err) {
        console.error("‚ùå newPost error:", err);
      }
    });

    // ---------------------------
    // ŸÅÿµŸÑ ÿßŸÑÿßÿ™ÿµÿßŸÑ
    // ---------------------------
    socket.on("disconnect", () => {
      try {
        // ŸÜÿ≠ÿ∞ŸÅ ÿßŸÑŸÖŸÅÿ™ÿßÿ≠ ÿßŸÑŸÖÿ±ÿ™ÿ®ÿ∑ ÿ®ÿßŸÑŸÄ socket.id
        for (const [userId, sId] of onlineUsers.entries()) {
          if (sId === socket.id) {
            onlineUsers.delete(userId);
            console.log(`‚ùå User disconnected: ${userId} (socket ${socket.id})`);
            break;
          }
        }
      } catch (err) {
        console.error("‚ùå disconnect error:", err);
      }
    });
  });

  return io;
};

// ÿØÿßŸÑÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ io ŸÖŸÜ ÿ®ŸÇŸäÿ© ÿßŸÑŸÖŸÑŸÅÿßÿ™
export const getIO = () => {
  if (!io) throw new Error("Socket.io not initialized!");
  return io;
};

// ÿØÿßŸÑÿ© ŸÖÿ≥ÿßÿπÿØÿ© ŸÑÿ•ÿ±ÿ≥ÿßŸÑ ÿ•ÿ¥ÿπÿßÿ± ŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿπŸäŸÜ (Ÿäÿ≥ÿ™ÿπŸÖŸÑŸáÿß ÿßŸÑŸÉŸÜÿ™ÿ±ŸàŸÑÿ±ÿ≤ ŸÑŸà ÿ≠ÿ®ŸëŸäÿ™)
export const sendNotification = async (userId, notificationObj) => {
  try {
    const socketId = onlineUsers.get(String(userId));
    if (socketId && io) {
      io.to(socketId).emit("receive_notification", notificationObj);
      console.log(`üì® Sent notification to user ${userId}`);
    } else {
      console.log(`‚ö™ User ${userId} not online ‚Äî notification saved in DB only`);
    }
  } catch (err) {
    console.error("‚ùå sendNotification error:", err);
  }
};
